name: ci

on:
  push:
    branches: [master]
  pull_request:

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Get year & week number
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date "+%Y-%U")"
        shell: bash -l {0}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
        shell: bash -l {0}

      - name: Setup dependencies cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.pip-cache.outputs.dir }}
          key: ${{ steps.get-date.outputs.date }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ steps.get-date.outputs.date }}-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: pip install -r requirements-dev.txt -f https://download.pytorch.org/whl/cpu/torch_stable.html --progress-bar off

      - name: Generate test files
        run: bash .github/run_test.sh generate

      - name: Run unittests
        run: bash .github/run_test.sh unittest

      - name: Run default integration tests
        run: bash .github/run_test.sh default

      - name: Run spawn integration tests
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: bash .github/run_test.sh spawn

      - name: Run dist launch integration tests
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: bash .github/run_test.sh launch
        env:
          OMP_NUM_THREADS: 1

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - run: pip install wheel pip setuptools -U --progress-bar off
      - run: bash .github/run_code_style.sh install
      - run: bash .github/run_code_style.sh lint
